name: Build

# Controls when the workflow will run
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'Dockerfile'

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    steps:
      # Get the repository's code
      - name: Checkout
        uses: actions/checkout@v2

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: karyeet/mandarine:amd64-${{ github.ref_name }} 

  build-arm64:
    runs-on: buildjet-2vcpu-ubuntu-2204-arm
    steps:
      # Get the repository's code
      - name: Checkout
        uses: actions/checkout@v2

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: buildjet/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: karyeet/mandarine:arm64-${{ github.ref_name }} 

  build-docker-multiarch:
    runs-on: ubuntu-latest
    needs: [build-arm64, build-amd64]
    steps:
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create and push multiarch manifest
        # We need to enable experimental docker features in order to use `docker manifest`
        run: |
              export DOCKER_CLI_EXPERIMENTAL=enabled;
              docker manifest create karyeet/mandarine:${GITHUB_REF_NAME} \
                  --amend karyeet/mandarine:arm64-${GITHUB_REF_NAME} \
                  --amend karyeet/mandarine:amd64-${GITHUB_REF_NAME};
              docker manifest push karyeet/mandarine:${GITHUB_REF_NAME}